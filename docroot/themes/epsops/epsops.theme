<?php


use Drupal\taxonomy\Entity\Term;
use \Drupal\Core\Access\AccessResult;
use \Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function epsops_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    $pathInfo = \Drupal::request()->getPathInfo();

    $path = explode('/',$pathInfo);
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $content_type = $node->bundle();
        $suggestions[] = 'page__'.$content_type;
    }



    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
      $term = Term::load($tid);
      $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
    }

    if(isset($path[1]) && in_array($path[1],['topic','instach','instapost'])) {
      if (isset($path[3])) {
        $suggestions[] = 'page__topic__' . $path[3];
      }
    }

}


/**
 * Implements hook_node_search_result().
 */
function epsops_node_search_result(\Drupal\node\NodeInterface $node) {

}


/**
 * Implements hook_preprocess_search_result().
 */
function epsops_preprocess_search_result(&$variables) {
//  // Change the date displayed in search results
//  // to be the created date, not the updated date.
//  if (isset($variables['info_split']['date'])) {
//    $node = $variables['result']['node'];
//    $created = \Drupal::service('date.formatter')->format($node->getCreatedTime());
//    // The date needs to be updated in two places.
//    $variables['info_split']['date'] = $created;
//    $variables['info']['#context']['info']['date'] = $created;
//  }

//  kint($variables);
//  die();
}


/**
 * Implements hook_preprocess_page().
 */
function epsops_preprocess_page(&$vars) {
  $pathInfo = \Drupal::request()->getPathInfo();

  $path = explode('/',$pathInfo);
  if(isset($path[1]) && $path[1] == 'user'){
//    $vars['#cache']['max-age'] = 0;
//    \Drupal::service("page_cache_kill_switch")->trigger();
  }



}



function epsops_preprocess_block(&$variables) {

}

/**
 * Implements hook_preprocess_region().
 */
function epsops_preprocess_region(&$variables) {

//  $region = $variables['elements']['#region'];
//
//  // Content region.
//  if ($region === 'content') {
//    $variables['theme_hook_suggestions'][] = 'region__no_wrapper';
//    $variables['content']['class'][] = 'row';
//    ksm($variables['attributes']['class'] = ['row']);
//  }
}

/**
 * Implements hook_preprocess_html().
 */
function epsops_preprocess_html(&$variables) {

}


/**
 * Implements hook_preprocess_page_title().
 */
function epsops_preprocess_page_title(&$vars) {



}


/**
 * @param $vars
 */
function epsops_preprocess_user(&$vars) {





}

/**
 * @param $vars
 */
function epsops_preprocess_node(&$vars) {



}


/**
 * Implements hook_preprocess_menu().
 */
function epsops_preprocess_menu(array &$variables) {


}

function epsops_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {

//  if(isset($css['themes/bootstrap/css/3.3.7/overrides.min.css']))unset($css['themes/bootstrap/css/3.3.7/overrides.min.css']);

}

function epsops_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {

//    $current_uri = \Drupal::request()->getRequestUri();
//    $path_matches = \Drupal::service('path.matcher')->matchPath($current_uri, '/user/*');
//    if($path_matches) {
//        unset($javascript['themes/epsops/js/list.min.js']);
//    }else{
//        unset($javascript['themes/epsops/js/bundle.js']);
//    }

}





function epsops_preprocess_container(&$vars){


}


function epsops_preprocess_views_view(&$vars) {


}


function current_page_user_id(){
  $pathInfo = \Drupal::request()->getPathInfo();
  $path = explode('/',$pathInfo);
  if(isset($path[1]) && $path[1] == 'user'){
    return $path[2];
  }
  return false;
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * @param array $suggestions
 * @param array $variables
 */
function epsops_theme_suggestions_block_alter(array &$suggestions, array &$variables) {

//$variables['elements']
  if (!empty($variables['elements']['content']['#block_content'])) {

    $block = $variables['elements']['content']['#block_content'];


    $suggestions[] = 'block__' . $block->bundle();

    $view_mode = $variables['elements']['#configuration']['view_mode'];

    if (!empty($view_mode)) {

      $suggestions[] = 'block__' . $block->bundle() . '__' . $view_mode;

    }

  }

}


